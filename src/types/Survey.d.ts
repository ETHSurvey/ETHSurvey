/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from 'web3/eth/contract';
import { TransactionObject, BlockType } from 'web3/eth/types';
import { Callback, EventLog } from 'web3/types';
import { EventEmitter } from 'events';
import { Provider } from 'web3/providers';

export class Survey {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions);
  _address: string;
  options: contractOptions;
  methods: {
    survey_indices(arg0: number | string): TransactionObject<string>;

    Surveys(
      arg0: string | number[]
    ): TransactionObject<{
      amount: string;
      requiredResponses: string;
      admin: string;
      creationTime: string;
      expirationTime: string;
      name: string;
      shortid: string;
      tokenAddress: string;
      remainingAmount: string;
      totalResponses: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: string;
      9: string;
    }>;

    createSurvey(
      _name: string,
      _shortid: string,
      _amount: number | string,
      _requiredResponses: number | string,
      _tokenAddress: string,
      _expirationTime: number | string
    ): TransactionObject<boolean>;

    submitSurveyResponse(_shortid: string): TransactionObject<boolean>;

    surveyInfo(
      _shortid: string
    ): TransactionObject<{
      0: string;
      1: string;
    }>;

    _surveyInfo(
      index: string | number[]
    ): TransactionObject<{
      0: string;
      1: string;
    }>;

    getUserSurveys(
      _admin: string
    ): TransactionObject<{
      0: (string)[];
      1: (string)[];
    }>;

    strToMappingIndex(str: string): TransactionObject<string>;

    stringToBytes32(source: string): TransactionObject<string>;

    numSurveys(): TransactionObject<string>;
  };
  deploy(options: {
    data: string;
    arguments: any[];
  }): TransactionObject<Contract>;
  events: {
    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
  getPastEvents(
    event: string,
    options?: {
      filter?: object;
      fromBlock?: BlockType;
      toBlock?: BlockType;
      topics?: (null | string)[];
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>;
  setProvider(provider: Provider): void;
}
